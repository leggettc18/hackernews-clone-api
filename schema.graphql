schema { 
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type Subscription {
    newLink: NewLinkEvent!
    newVote: NewVoteEvent!
}

type NewLinkEvent {
    id: String!
    newLink: Link!
}

type NewVoteEvent {
    id: String!
    newVote: Vote!
}

type Query {
    links(OR: [String!], AND: [String!], first: Int, skip: Int, orderBy: String): [Link!]
    linksMeta: Meta
    link(id: ID!): Link!
}

scalar Time

"Links are the posts of hackernews-clone, containing descriptions, urls, and votes"
type Link {
    id: ID!
    createdAt: Time!
    description: String!
    url: String!
    postedBy: User!
    votes: [Vote!]
}

type Mutation {
    post(url: String!, description: String!): Link!
    signup(email: String!, password: String!, name: String!): AuthPayload
    login(email: String!, password: String!): AuthPayload
    upVote(linkId: ID!): Vote!
}

type AuthPayload {
    token: String
    user: User
}

"Users have all the info for user accounts, such as names, email addresses, links posted, and votes made."
type User {
    id: ID!
    email: String!
    name: String!
    links: [Link!]
    votes: [Vote!]
}

"Votes describe an upvote that happened on a particular link."
type Vote {
    id: ID!
    user: User!
    link: Link!
}

"Meta specifies some metadata about other types."
type Meta {
    count: Int!
}